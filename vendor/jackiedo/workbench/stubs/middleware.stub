<?php namespace {{vendor}}\{{name}}{{@callback
        $namespaceSuffix = str_replace("/", "\\", $this->getRelativePath($this->namespaceDirPath, $this->resourceDirsPath["middleware"]));
        if (!empty($namespaceSuffix)) {
            $namespaceSuffix = "\\".$namespaceSuffix;
        }
        return $namespaceSuffix;
    @end}};

use Closure;

/**
 * The {{@callback
        return rtrim($this->buildResourceFileName("middleware"), '.php');
    @end}} class.
 *
 * @package {{vendor}}\{{name}}
 * @author  {{author}} <{{email}}>
 */
class {{@callback
        return rtrim($this->buildResourceFileName("middleware"), '.php');
    @end}}
{

    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        return $next($request);
    }
}
